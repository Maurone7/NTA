{
  "b5a9935343a6bf5edaebd6332da564b8f6100c9ed105fbcf0f72efe11b1c0ca6": {
    "content": "Here are the modified file contents:\n\n```javascript\napp.on('window-all-closed', () => {\n  // Clean up file watcher\n  stopFileWatcher();\n  \n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('before-quit', () => {\n  // Clean up file watcher before quitting\n  stopFileWatcher();\n});\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createMainWindow();\n  }\n});\n```\n\nThese lines of code seem to handle various application events, such as the window being closed or activated.\n\n",
    "ts": 1760624416.9498281
  },
  "cf2a97b07fd684d721faeee5434c139fa8864ecaa21f96a8280c136c04c1fd45": {
    "content": "```javascript\napp.on('window-all-closed', () => {\n  // Clean up file watcher\n  stopFileWatcher();\n\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('before-quit', () => {\n  // Clean up file watcher before quitting\n  stopFileWatcher();\n});\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createMainWindow();\n  }\n});\n```\n\n",
    "ts": 1760624653.897266
  },
  "556d9effe3aefc1067ed6c3dc0eae09c8d8020db6a45806b1e45ca9b235a3096": {
    "content": "```javascript\nconst { app, BrowserWindow, ipcMain, dialog } = require('electron');\nconst path = require('path');\nconst fs = require('fs');\n\nfunction createWindow() {\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js'),\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  });\n\n  mainWindow.loadFile('src/renderer/index.html');\n}\n\nipcMain.handle('app:checkForUpdates', async () => {\n  console.log('Checking for updates...');\n  return { status: 'no-updates' };\n});\n\nipcMain.handle('workspace:chooseFolder', async () => {\n  const result = await dialog.showOpenDialog({\n    properties: ['openDirectory']\n  });\n  return result.filePaths?.[0] || null;\n});\n\n// Minimal implementation to load a workspace at a given path.\n// Returns an object similar to what the renderer expects: { folderPath, tree, notes, preferredActiveId }\nipcMain.handle('workspace:loadAtPath', async (_event, data) => {\n  try {\n    const folderPath = (data && data.folderPath) ? String(data.folderPath) : null;\n    if (!folderPath) return null;\n\n    // Build a flat notes array from top-level files (non-recursive for safety).\n    const entries = [];\n    try {\n      const dirents = await fs.promises.readdir(folderPath, { withFileTypes: true });\n      for (const d of dirents) {\n        if (!d.isFile()) continue;\n        const name = d.name;\n        const ext = String(name).split('.').pop().toLowerCase();\n        if (!['md', 'pdf', 'ipynb', 'html', 'txt'].includes(ext)) continue;\n        const full = path.join(folderPath, name);\n        const stat = await fs.promises.stat(full).catch(() => null);\n        entries.push({\n          id: `file-${Buffer.from(full).toString('base64').slice(0, 12)}`,\n          title: name,\n          type: ext === 'ipynb' ? 'notebook' : (ext === 'pdf' ? 'pdf' : 'markdown'),\n          absolutePath: full,\n          folderPath,\n          createdAt: stat ? stat.ctime.toISOString() : new Date().toISOString(),\n          updatedAt: stat ? stat.mtime.toISOString() : new Date().toISOString(),\n        });\n      }\n    } catch (e) {\n      // on error, return minimal structure\n    }\n\n    // Build a flat notes array from top-level files (non-recursive for safety).\n    const entries = [];\n    try {\n      const dirents = await fs.promises.readdir(folderPath, { withFileTypes: true });\n      for (const d of dirents) {\n        if (!d.isFile()) continue;\n        const name = d.name;\n        const ext = String(name).split('.').pop().toLowerCase();\n        if (!['md', 'pdf', 'ipynb', 'html', 'txt'].includes(ext)) continue;\n        const full = path.join(folderPath, name);\n        const stat = await fs.promises.stat(full).catch(() => null);\n        entries.push({\n          id: `file-${Buffer.from(full).toString('base64').slice(0, 12)}`,\n          title: name,\n          type: ext === 'ipynb' ? 'notebook' : (ext === 'pdf' ? 'pdf' : 'markdown'),\n          absolutePath: full,\n          folderPath,\n          createdAt: stat ? stat.ctime.toISOString() : new Date().toISOString(),\n          updatedAt: stat ? stat.mtime.toISOString() : new Date().toISOString(),\n        });\n      }\n    } catch (e) {\n      // on error, return minimal structure\n    }\n\n    // Build tree children corresponding to discovered files so the renderer\n    // can display a workspace file tree. Each child is a node with the\n    // properties the renderer expects: { type, name, path, ext, supported, noteId }\n    const children = entries.map((e) => {\n      const extRaw = (e.absolutePath && e.absolutePath.split('.').pop()) || '';\n      const ext = extRaw ? `.${extRaw}` : '';\n      return {\n        type: 'file',\n        name: e.title,\n        path: e.absolutePath,\n        ext,\n        supported: true,\n        noteId: e.id\n      };\n    });\n\n    const tree = { name: path.basename(folderPath), path: folderPath, children };\n\n    return {\n      folderPath,\n      tree,\n      notes: entries,\n      preferredActiveId: entries.length ? entries[0].id : null,\n    };\n  } catch (err) {\n    return null;\n  }\n});\n\n// Stub handlers to satisfy renderer calls during initial load. These provide\n// minimal, safe return values so the UI can function without the full\n// workspace/native integrations implemented in the main process.\nipcMain.handle('notes:load', async () => {\n  return [];\n});\n\nipcMain.handle('notes:paths', async () => {\n  return [];\n});\n\nipcMain.handle('workspace:resolveResource', async (_event, payload) => {\n  // Return a simple file:// URL for local absolute paths so the renderer can fetch them.\n  try {\n    const src = payload && payload.src ? String(payload.src) : null;\n    if (!src) return { value: null };\n    if (src.startsWith('http://') || src.startsWith('https://') || src.startsWith('data:')) {\n      return { value: src };\n    }\n    // For local files, return a file:// URL\n    const resolved = path.isAbsolute(src) ? src : path.resolve(src);\n    return { value: `file://${resolved}` };\n  } catch (e) {\n    return { value: null };\n  }\n});\n\n// Additional safe stubs\nconst noopAsync = async () => null;\nipcMain.handle('workspace:readBibliography', noopAsync);\nipcMain.handle('workspace:loadPdfData', noopAsync);\nipcMain.handle('workspace:saveExternalMarkdown', noopAsync);\nipcMain.handle('workspace:saveNotebook', noopAsync);\nipcMain.handle('workspace:createMarkdownFile', noopAsync);\nipcMain.handle('workspace:renameMarkdownFile', noopAsync);\nipcMain.handle('workspace:readPdfBinary', noopAsync);\nipcMain.handle('workspace:revealInFinder', async (_event, p) => {\n  // best-effort: try to reveal using shell if available\n  try { const { shell } = require('electron'); if (p) shell.showItemInFolder(String(p)); } catch (e) {}\n  return null;\n});\nipcMain.handle('workspace:deleteFile', noopAsync);\nipcMain.handle('workspace:pasteFile', noopAsync);\n\nipcMain.handle('preview:exportPdf', noopAsync);\nipcMain.handle('preview:exportHtml', noopAsync);\nipcMain.handle('preview:exportDocx', noopAsync);\nipcMain.handle('preview:exportEpub', noopAsync);\n\nipcMain.handle('debug:write', noopAsync);\nipcMain.handle('debug:readReplaceLog', noopAsync);\nipcMain.handle('debug:listWorkspaceDebug', noopAsync);\nipcMain.handle('debug:readWorkspaceDebugFile', noopAsync);\nipcMain.handle('debug:killWorkspaceReplacer', noopAsync);\nipcMain.handle('debug:openWorkspaceReplacedApp', noopAsync);\n\nipcMain.handle('notes:selectPdf', noopAsync);\nipcMain.handle('notes:loadPdfData', noopAsync);\n```\n\n\n",
    "ts": 1760662872.007385
  },
  "87d314b9b34b477706ec4b4053306da05560dcdc3cba65eea89dd60ce51dfcf8": {
    "content": "```javascript\nconst { contextBridge, ipcRenderer } = require('electron');\n\nconst api = {\n  loadNotes: () => ipcRenderer.invoke('notes:load'),\n  saveNotes: (notes) => ipcRenderer.invoke('notes:save', notes),\n  selectPdf: () => ipcRenderer.invoke('notes:selectPdf'),\n  loadPdfData: (payload) => ipcRenderer.invoke('notes:loadPdfData', payload),\n  chooseFolder: () => ipcRenderer.invoke('workspace:chooseFolder'),\n  loadWorkspaceAtPath: (data) => ipcRenderer.invoke('workspace:loadAtPath', data),\n  saveExternalMarkdown: (data) => ipcRenderer.invoke('workspace:saveExternalMarkdown', data),\n  // Save a notebook (.ipynb). Payload: { filePath, notebook }\n  saveNotebook: (data) => ipcRenderer.invoke('workspace:saveNotebook', data),\n  createMarkdownFile: (data) => ipcRenderer.invoke('workspace:createMarkdownFile', data),\n  readBibliography: (data) => ipcRenderer.invoke('workspace:readBibliography', data),\n  openFileChooser: () => ipcRenderer.invoke('workspace:chooseBibFile'),\n  renameMarkdownFile: (data) => ipcRenderer.invoke('workspace:renameMarkdownFile', data),\n  readPdfBinary: (data) => ipcRenderer.invoke('workspace:readPdfBinary', data),\n  resolveResource: (data) => ipcRenderer.invoke('workspace:resolveResource', data),\n  getPaths: () => ipcRenderer.invoke('notes:paths'),\n  exportPreviewPdf: (data) => ipcRenderer.invoke('preview:exportPdf', data),\n  exportPreviewHtml: (data) => ipcRenderer.invoke('preview:exportHtml', data),\n  exportPreviewDocx: (data) => ipcRenderer.invoke('preview:exportDocx', data),\n  exportPreviewEpub: (data) => ipcRenderer.invoke('preview:exportEpub', data),\n  revealInFinder: (path) => ipcRenderer.invoke('workspace:revealInFinder', path),\n  deleteFile: (path) => ipcRenderer.invoke('workspace:deleteFile', path),\n  pasteFile: (data) => ipcRenderer.invoke('workspace:pasteFile', data),\n  // Debug helper: append a JSON line to a temp logfile (useful when console forwarding is unavailable)\n  writeDebugLog: (payload) => ipcRenderer.invoke('debug:write', payload),\n  readReplaceLog: () => ipcRenderer.invoke('debug:readReplaceLog'),\n  listWorkspaceDebug: () => ipcRenderer.invoke('debug:listWorkspaceDebug'),\n  readWorkspaceDebugFile: (filename) => ipcRenderer.invoke('debug:readWorkspaceDebugFile', filename),\n  killWorkspaceReplacer: () => ipcRenderer.invoke('debug:killWorkspaceReplacer'),\n  openWorkspaceReplacedApp: () => ipcRenderer.invoke('debug:openWorkspaceReplacedApp'),\n  killWorkspaceReplacer: () => ipcRenderer.invoke('debug:killWorkspaceReplacer'),\n  openWorkspaceReplacedApp: () => ipcRenderer.invoke('debug:openWorkspaceReplacedApp'),\n  \n  // Set window title\n  setTitle: (title) => ipcRenderer.invoke('window:setTitle', title),\n  \n  // Traffic light positioning\n  setTrafficLightPosition: (position) => ipcRenderer.invoke('window:setTrafficLightPosition', position),\n  setTrafficLightOffset: (offset) => ipcRenderer.invoke('window:setTrafficLightOffset', offset),\n  \n  // Update methods\n  checkForUpdates: () => ipcRenderer.invoke('app:checkForUpdates'),\n  quitAndInstall: () => ipcRenderer.invoke('app:quitAndInstall'),\n  // Note: download/update APIs removed - app no longer performs automatic downloads.\n  // Custom in-app updater: verified download + progress events\n  customCheckAndUpdate: (opts) => ipcRenderer.invoke('app:customCheckAndUpdate', opts || {}),\n  \n  // Dev-only check which queries GitHub directly (works in unpacked/dev mode)\n  devCheckForUpdates: () => ipcRenderer.invoke('app:devCheckForUpdates'),\n  getVersion: () => ipcRenderer.invoke('app:getVersion'),\n  \n  // Generic invoke for backward compatibility with existing renderer code\n  invoke: (channel, ...args) => ipcRenderer.invoke(channel, ...args),\n  \n  // IPC listeners\n  onWorkspaceChanged: (callback) => {\n    ipcRenderer.on('workspace:changed', (_event, data) => callback(data));\n  },\n  removeWorkspaceChangedListener: () => {\n    ipcRenderer.removeAllListeners('workspace:changed');\n  },\n  \n  // Update event listeners\n  on: (channel, callback) => {\n    const validChannels = ['update-available', 'update-progress', 'update-downloaded', 'update-not-available', 'update-error', 'workspace:changed', 'custom-update-progress', 'custom-update-started', 'custom-update-result', 'fallback-started', 'fallback-result', 'fallback-available', 'fallback-progress'];\n    if (validChannels.includes(channel)) {\n      ipcRenderer.on(channel, (_event, data) => callback(data));\n    }\n  },\n  removeListener: (channel) => {\n    ipcRenderer.removeAllListeners(channel);\n  }\n};\n\ncontextBridge.exposeInMainWorld('api', api);\n\n// Expose a dedicated font importer that accepts a display name, filename and an ArrayBuffer\ncontextBridge.exposeInMainWorld('fontImporter', {\n  importFont: async (displayName, filename, arrayBuffer) => {\n    // We transfer the buffer to the main process; ipcRenderer will serialize the ArrayBuffer\n    return ipcRenderer.invoke('fonts:import', { displayName, filename, buffer: arrayBuffer });\n  }\n});\n\n```\n\n\n",
    "ts": 1760662917.671875
  },
  "f7df13647f55f78a4a313bcd8e6267093a77e4fbd3ad74c18087a0dd7efddcdc": {
    "content": "```javascript\ntry {\n  const originalContent = await window.api.exportPreviewPdf({ html, title, folderPath });\n  const changedContent = originalContent !== window.NTA && originalContent !== 'Untitled';\n  console.log(\"Original Content:\", originalContent);\n  console.log(\"Changed Content:\", changedContent);\n\n} catch (error) {\n  console.error(\"Error exporting:\", error);\n}\n```\n\n",
    "ts": 1760662976.797436
  },
  "dbb641d206772e6548abfe4f49d389c86dd6b9b5435668431dbe198c6c97e0c3": {
    "content": "```javascript\nfunction autolinkPlainUrlsInTextarea(textarea) {\n  try {\n    if (!textarea || typeof textarea.value !== 'string') return;\n    let v = textarea.value;\n    if (!/(?:https?:\\/\\/|www\\.)/i.test(v)) return;\n\n    // Match either scheme-prefixed URLs or bare www. URLs\n    const urlRe = /\\b(?:https?:\\/\\/|www\\.)[^\\s<>()]+/gi;\n    let match;\n    const originalSelectionStart = textarea.selectionStart || 0;\n    const originalSelectionEnd = textarea.selectionEnd || 0;\n    // We'll build a new string progressively to allow conservative skipping\n    let out = v;\n    while ((match = urlRe.exec(v)) !== null) {\n      const url = match[0];\n      const idx = match.index;\n      // Check surrounding chars to avoid URLs already in links or parentheses\n      const beforeChar = v[idx - 1] || '';\n      const afterChar = v[idx + url.length] || '';\n      if (beforeChar === '(' || beforeChar === ']' || afterChar === ')' || afterChar === ']') {\n        continue;\n      }\n\n      // Avoid transforming if this URL is already part of a markdown link like [text](url)\n      const lookback = Math.max(0, idx - 60);\n      const contextBefore = v.slice(lookback, idx + url.length + 2);\n      if (/\\[[^\\]]*\\]\\($/m.test(contextBefore) || /\\[[^\\]]+\\]\\([^)]*$/m.test(contextBefore)) {\n        continue;\n      }\n\n      // Avoid transforming if this URL is already part of a markdown link like [text](url)\n      const lookback = Math.max(0, idx - 60);\n      const contextBefore = v.slice(lookback, idx + url.length + 2);\n      if (/\\[[^\\]]*\\]\\($/m.test(contextBefore) || /\\[[^\\]]+\\]\\([^)]*$/m.test(contextBefore)) {\n        continue;\n      }\n\n      // Build a label using the URL host (strip leading www.).\n      let label = url;\n      try {\n        if (/^www\\./i.test(url)) {\n          const m = url.match(/^(?:www\\.)?([^\\/\\:?#]+)/i);\n          label = (m && m[1]) ? m[1].replace(/^www\\./i, '') : url;\n        } else {\n          const u = new URL(url);\n          label = (u.hostname || url).replace(/^www\\./i, '');\n        }\n      } catch (e) {\n        const m = url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/\\:?#]+)/i);\n        label = (m && m[1]) ? m[1].replace(/^www\\./i, '') : url;\n      }\n\n      const replacement = `[${label}](${url})`;\n      const before = out.slice(0, idx);\n      const after = out.slice(idx + url.length);\n      out = before + replacement + after;\n      // Move lastIndex forward in the original string to avoid infinite loop\n      urlRe.lastIndex = idx + replacement.length;\n    }\n\n    if (out !== textarea.value) {\n      const oldLen = textarea.value.length;\n      const newLen = out.length;\n      const delta = newLen - oldLen;\n      // Preserve original selection positions\n      const origStart = textarea.selectionStart || 0;\n      const origEnd = textarea.selectionEnd || 0;\n      textarea.value = out;\n      try {\n        const desiredStart = Math.max(0, Math.min(origStart + delta, newLen));\n        const desiredEnd = Math.max(0, Math.min(origEnd + delta, newLen));\n        textarea.selectionStart = desiredStart;\n        textarea.selectionEnd = desiredEnd;\n      } catch (e) { /* ignore selection restore errors */ }\n      textarea.dispatchEvent(new Event('input', { bubbles: true }));\n    }\n  } catch (e) {\n    // swallow errors to avoid breaking typing\n  }\n}\n\nmodule.exports = { autolinkPlainUrlsInTextarea };\n```\n\n",
    "ts": 1760663020.4233558
  },
  "1773a820c375ba61fd799190d441abb338d2f66369e5b36e26c8fda8f602f020": {
    "content": "```html\n<p>The provided HTML code contains a series of settings and options related to application settings within a web application.  It includes a `settings-tab` which contains settings for various aspects of the application.  The code displays a series of `settings-item` sections, each with a label, button, and potentially a submessage. The current content appears to be demonstrating a state management flow for configuring the application, likely related to update checking, version management, and potentially other application aspects.\n</p>\n```\n\n",
    "ts": 1760663045.701838
  },
  "c63801ce270cf46655b9242c838d00220bcbadac0e2a590fe1e98a39262d41b3": {
    "content": "```\n/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * without warranties or conditions of any kind, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n:root {\n  --panel-width: 300px;\n}\n\n#PDFBug,\n#PDFBug :is(input, button, select) {\n  font: message-box;\n}\n#PDFBug {\n  background-color: rgb(255 255 255);\n  border: 1px solid rgb(102 102 102);\n  position: fixed;\n  top: 32px;\n  right: 0;\n  bottom: 0;\n  font-size: 10px;\n  padding: 0;\n  width: var(--panel-width);\n}\n#PDFBug .controls {\n  background: rgb(238 238 238);\n  border-bottom: 1px solid rgb(102 102 102);\n  padding: 3px;\n}\n#PDFBug .panels {\n  inset: 27px 0 0;\n  overflow: auto;\n  position: absolute;\n}\n#PDFBug .panels > div {\n  padding: 5px;\n}\n#PDFBug button.active {\n  font-weight: bold;\n}\n.debuggerShowText,\n.debuggerHideText:hover {\n  background-color: rgb(255 255 0 / 0.25);\n}\n#PDFBug .stats {\n  font-family: courier;\n  font-size: 10px;\n  white-space: pre;\n}\n#PDFBug .stats .title {\n  font-weight: bold;\n}\n#PDFBug table {\n  font-size: 10px;\n  white-space: pre;\n}\n#PDFBug table.showText {\n  border-collapse: collapse;\n  text-align: center;\n}\n#PDFBug table.showText,\n#PDFBug table.showText :is(tr, td) {\n  border: 1px solid black;\n  padding: 1px;\n}\n#PDFBug table.showText td.advance {\n  color: grey;\n}\n\n#viewer.textLayer-visible .textLayer {\n  opacity: 1;\n}\n\n#viewer.textLayer-visible .canvasWrapper {\n  background-color: rgb(128 255 128);\n}\n\n#viewer.textLayer-visible .canvasWrapper canvas {\n  mix-blend-mode: screen;\n}\n\n#viewer.textLayer-visible .textLayer span {\n  background-color: rgb(255 255 0 / 0.1);\n  color: rgb(0 0 0);\n  border: solid 1px rgb(255 0 0 / 0.5);\n  box-sizing: border-box;\n}\n\n#viewer.textLayer-visible .textLayer span[aria-owns] {\n  background-color: rgb(255 0 0 / 0.3);\n}\n\n#viewer.textLayer-hover .textLayer span:hover {\n  background-color: rgb(255 255 255);\n  color: rgb(0 0 0);\n}\n\n#viewer.textLayer-shadow .textLayer span {\n  background-color: rgb(255 255 255 / 0.6);\n  color: rgb(0 0 0);\n}\n```\n\n\n",
    "ts": 1760663079.2971342
  },
  "f23e6d45188278f7041ea583143e9ff87dc88d0d031e18772bd1681721245142": {
    "content": "```json\n{\"ach\":\"ach/viewer.ftl\",\"af\":\"af/viewer.ftl\",\"an\":\"an/viewer.ftl\",\"ar\":\"ar/viewer.ftl\",\"ast\":\"ast/viewer.ftl\",\"az\":\"az/viewer.ftl\",\"be\":\"be/viewer.ftl\",\"bg\":\"bg/viewer.ftl\",\"bn\":\"bn/viewer.ftl\",\"bo\":\"bo/viewer.ftl\",\"br\":\"br/viewer.ftl\",\"brx\":\"brx/viewer.ftl\",\"bs\":\"bs/viewer.ftl\",\"ca\":\"ca/viewer.ftl\",\"cak\":\"cak/viewer.ftl\",\"ckb\":\"ckb/viewer.ftl\",\"cs\":\"cs/viewer.ftl\",\"cy\":\"cy/viewer.ftl\",\"da\":\"da/viewer.ftl\",\"de\":\"de/viewer.ftl\",\"dsb\":\"dsb/viewer.ftl\",\"el\":\"el/viewer.ftl\",\"en-ca\":\"en-CA/viewer.ftl\",\"en-gb\":\"en-GB/viewer.ftl\",\"en-us\":\"en-US/viewer.ftl\",\"eo\":\"eo/viewer.ftl\",\"es-ar\":\"es-AR/viewer.ftl\",\"es-cl\":\"es-CL/viewer.ftl\",\"es-ES\":\"es-ES/viewer.ftl\",\"es-mx\":\"es-MX/viewer.ftl\",\"et\":\"et/viewer.ftl\",\"eu\":\"eu/viewer.ftl\",\"fa\":\"fa/viewer.ftl\",\"ff\":\"ff/viewer.ftl\",\"fi\":\"fi/viewer.ftl\",\"fr\":\"fr/viewer.ftl\",\"fur\":\"fur/viewer.ftl\",\"fy-nl\":\"fy-NL/viewer.ftl\",\"ga-ie\":\"ga-IE/viewer.ftl\",\"gd\":\"gd/viewer.ftl\",\"gl\":\"gl/viewer.ftl\",\"gn\":\"gn/viewer.ftl\",\"gu-in\":\"gu-IN/viewer.ftl\",\"he\":\"he/viewer.ftl\",\"hi-in\":\"hi-IN/viewer.ftl\",\"hr\":\"hr/viewer.ftl\",\"hsb\":\"hsb/viewer.ftl\",\"hu\":\"hu/viewer.ftl\",\"hy-am\":\"hy-AM/viewer.ftl\",\"hye\":\"hye/viewer.ftl\",\"ia\":\"ia/viewer.ftl\",\"id\":\"id/viewer.ftl\",\"is\":\"is/viewer.ftl\",\"it\":\"it/viewer.ftl\",\"ja\":\"ja/viewer.ftl\",\"ka\":\"ka/viewer.ftl\",\"kab\":\"kab/viewer.ftl\",\"kk\":\"kk/viewer.ftl\",\"km\":\"km/viewer.ftl\",\"kn\":\"kn/viewer.ftl\",\"ko\":\"ko/viewer.ftl\",\"lij\":\"lij/viewer.ftl\",\"lo\":\"lo/viewer.ftl\",\"lt\":\"lt/viewer.ftl\",\"ltg\":\"ltg/viewer.ftl\",\"lv\":\"lv/viewer.ftl\",\"meh\":\"meh/viewer.ftl\",\"mk\":\"mk/viewer.ftl\",\"mr\":\"mr/viewer.ftl\",\"ms\":\"ms/viewer.ftl\",\"my\":\"my/viewer.ftl\",\"nb-no\":\"nb-NO/viewer.ftl\",\"ne-np\":\"ne-NP/viewer.ftl\",\"nl\":\"nl/viewer.ftl\",\"nn-no\":\"nn-NO/viewer.ftl\",\"oc\":\"oc/viewer.ftl\",\"pa-in\":\"pa-IN/viewer.ftl\",\"pl\":\"pl/viewer.ftl\",\"pt-br\":\"pt-BR/viewer.ftl\",\"pt-pt\":\"pt-PT/viewer.ftl\",\"rm\":\"rm/viewer.ftl\",\"ro\":\"ro/viewer.ftl\",\"ru\":\"ru/viewer.ftl\",\"sat\":\"sat/viewer.ftl\",\"sc\":\"sc/viewer.ftl\",\"scn\":\"scn/viewer.ftl\",\"sco\":\"sco/viewer.ftl\",\"si\":\"si/viewer.ftl\",\"sk\":\"sk/viewer.ftl\",\"skr\":\"skr/viewer.ftl\",\"sl\":\"sl/viewer.ftl\",\"son\":\"son/viewer.ftl\",\"sq\":\"sq/viewer.ftl\",\"sr\":\"sr/viewer.ftl\",\"sv-se\":\"sv-SE/viewer.ftl\",\"szl\":\"szl/viewer.ftl\",\"ta\":\"ta/viewer.ftl\",\"te\":\"te/viewer.ftl\",\"tg\":\"tg/viewer.ftl\",\"th\":\"th/viewer.ftl\",\"tl\":\"tl/viewer.ftl\",\"tr\":\"tr/viewer.ftl\",\"trs\":\"trs/viewer.ftl\",\"uk\":\"uk/viewer.ftl\",\"ur\":\"ur/viewer.ftl\",\"uz\":\"uz/viewer.ftl\",\"vi\":\"vi/viewer.ftl\",\"wo\":\"wo/viewer.ftl\",\"xh\":\"xh/viewer.ftl\",\"zh-cn\":\"zh-CN/viewer.ftl\",\"zh-tw\":\"zh-TW/viewer.ftl\"}\n```\n\n",
    "ts": 1760663118.597638
  },
  "e0983a9b01ece2559b7b26af18aa28257d207cfd7c5b4e02adf2a735e39c8e90": {
    "content": "```\n{\n  \"body\": \"This code snippet provides a stylistic refresh to a React component, enhancing its appearance with dark mode support and a visually appealing toggle button.  The primary focus is to improve readability and user experience, particularly regarding dark mode transitions.  The structure is organized to maintain consistency and readability.\\n\\n**Key Changes & Improvements:**\\n\\n* **Dark Mode Support:**  The code now includes a `dark-mode` class and associated styles that effectively enable dark mode transitions, including a toggle button.  It uses CSS `filter: invert()` to invert the color of background elements, creating a seamless dark mode effect.  `invert()` is a CSS filter that effectively creates a dark background.\\n\\n* **Toggle Button Enhancements:** The toggle button's styling has been revamped for better visual clarity, with a subtle hover effect (the `span` style) and a clear visual indication of the current mode.  The background color of the toggle button is adjusted.\\n* **Style Updates:** Minor adjustments were made to existing styles for improved visual harmony.\\n* **Dark Mode Improvements:**  The dark mode toggle is now more intuitive. The `dark-mode` class applied to the body changes the overall color scheme to a darker background.  The toggle button has a dark background.  The text is enhanced with a subtle dark mode effect.\\n* **Improved Readability:** Minor adjustments were made to spacing and alignment, enhancing readability.\\n\\n**Overall Goal:** This revision prioritizes a more polished and user-friendly experience, particularly for users who prefer dark mode.  The changes enhance the existing visual qualities while adding a strong dark mode function.\\n\\n**Note:** The code relies heavily on CSS transitions and the `invert()` filter, which can be easily customized for specific needs.\\n\"\n}\n```\n\n",
    "ts": 1760663320.978059
  },
  "e421b1bcf669e4f2e68b5a167318d34a763367f58d5012a6100e4dec37daf32c": {
    "content": "```html\n<p>This is the content of the file.</p>\n```\n\n\n",
    "ts": 1760663328.808779
  },
  "a503a9723ab50fed5bcbeedb4930ae62d79c2a91e6d4e3e53f8f7c3081341653": {
    "content": "```\n{\n  \"body\": \"{\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6, \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"header\": \"{\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h1\\\": \\\"{\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h2\\\": \\\"{\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h3\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h4\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h5\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h6\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h7\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h8\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h9\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"ul\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"padding\\\": \\\"1em\\\",\\n  \\\"margin\\\": \\\"0\\\"\\n}\",\n  \"li\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"padding\\\": \\\"0.5em\\\",\\n  \\\"text-align\\\": \\\"center\\\"\\n}\",\n  \"a\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"a:hover\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"img\\\": \\\"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h1\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h2\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h3\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h4\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h5\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h6\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h7\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h8\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"h9\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"ul\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"padding\\\": \\\"1em\\\",\\n  \\\"margin\\\": \\\"0\\\"\\n}\",\n  \"li\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"padding\\\": \\\"0.5em\\\",\\n  \\\"text-align\\\": \\\"center\\\"\\n}\",\n  \"a\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"a:hover\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n  \"img\": \"{\\\\n  \\\"fontFamily\\\": \\\"Computer Modern, \\\"latinModernRoman\\\", \\\" serif\\\": \\\"\\\",\\n  \\\"lineHeight\\\": 1.6,\\n  \\\"fontStyle\\\": \\\"normal\\\"\\n}\",\n}\n```\n\n",
    "ts": 1760663387.087768
  },
  "890732ebe721d02c28587924459428ef57279e32bc14a574039821feeb524526": {
    "content": "```javascript\nmodule.exports = {\n  loadFolderNotes,\n  createMarkdownFile,\n  renameMarkdownFile,\n  readPdfAsDataUri,\n  readPdfBuffer,\n  saveMarkdownFile\n};\n```\n\n",
    "ts": 1760663413.555521
  },
  "49233cccf250091e99aa245bacb708c0a968f5001197990c19bbd335ab1d82ea": {
    "content": "```javascript\nconst fs = require('fs');\nconst fsp = require('fs').promises;\nconst path = require('path');\nconst crypto = require('crypto');\n\nconst NOTES_FILENAME = 'notes.json';\nconst PDF_DIRECTORY = 'pdfs';\nconst APP_NAMESPACE = 'NTA';\n\nconst defaultContent = JSON.stringify({ notes: [] }, null, 2);\n\nconst fileExists = async (target) => {\n  try {\n    await fsp.access(target, fs.constants.F_OK);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nconst ensureDirectory = async (target) => {\n  await fsp.mkdir(target, { recursive: true });\n};\n\nconst readJsonFile = async (target) => {\n  const raw = await fsp.readFile(target, 'utf-8');\n  return JSON.parse(raw);\n};\n\nconst writeJsonFile = async (target, data) => {\n  const payload = JSON.stringify(data, null, 2);\n  await fsp.writeFile(target, `${payload}\\n`, 'utf-8');\n};\n\nconst safeJoin = (...segments) => path.join(...segments.filter(Boolean));\n\nconst createNotesStore = (basePath) => {\n  if (!basePath) {\n    throw new Error('createNotesStore requires a basePath');\n  }\n\n  const dataDir = safeJoin(basePath, APP_NAMESPACE);\n  const notesFile = safeJoin(dataDir, NOTES_FILENAME);\n  const pdfDir = safeJoin(dataDir, PDF_DIRECTORY);\n\n  const initialize = async () => {\n    await ensureDirectory(dataDir);\n    await ensureDirectory(pdfDir);\n\n    if (!(await fileExists(notesFile))) {\n      await fsp.writeFile(notesFile, `${defaultContent}\\n`, 'utf-8');\n    }\n  };\n\n  const loadNotes = async () => {\n    const json = await readJsonFile(notesFile).catch(async (err) => {\n      await fsp.writeFile(notesFile, `${defaultContent}\\n`, 'utf-8');\n      return JSON.parse(defaultContent);\n    });\n\n    if (!json || !Array.isArray(json.notes)) {\n      return [];\n    }\n\n    return json.notes;\n  };\n\n  const saveNotes = async (target, data) => {\n    if (!Array.isArray(data)) {\n      throw new Error('notes must be an array');\n    }\n\n    const payload = {\n      notes: data.map((note) => ({\n        ...note,\n        id: note.id || crypto.randomUUID(),\n        updatedAt: note.updatedAt || new Date().toISOString()\n      }))\n    };\n\n    await writeJsonFile(notesFile, payload);\n  };\n\n  const importPdf = async (sourcePath) => {\n    if (!sourcePath) {\n      return null;\n    }\n\n    const pdfId = crypto.randomUUID();\n    const storedName = `${pdfId}.pdf`;\n    const destination = safeJoin(pdfDir, storedName);\n\n    await fsp.copyFile(sourcePath, destination);\n\n    const { name } = path.parse(sourcePath);\n    const now = new Date().toISOString();\n\n    return {\n      id: pdfId,\n      title: name,\n      type: 'pdf',\n      storedPath: storedName,\n      createdAt: now,\n      updatedAt: now\n    };\n  };\n\n  const readPdfAsDataUri = async (storedPath) => {\n    if (!storedPath) {\n      return null;\n    }\n\n    const filePath = safeJoin(pdfDir, storedPath);\n    if (!(await fileExists(filePath))) {\n      return null;\n    }\n\n    const buffer = await fsp.readFile(filePath);\n    const base64 = buffer.toString('base64');\n    return `data:application/pdf;base64,${base64}`;\n  };\n\n  const getPaths = () => ({\n    basePath,\n    dataDir,\n    notesFile,\n    pdfDir\n  });\n\n  return {\n    initialize,\n    loadNotes,\n    saveNotes,\n    importPdf,\n    readPdfAsDataUri,\n    getPaths\n  };\n};\n\nmodule.exports = { createNotesStore };\n\n```\n\n",
    "ts": 1760663458.293113
  },
  "83df1bfe6e69946d0d80c5fa3e769de5e2b8ea631b14c3cf7ee50d4702c0e276": {
    "content": "```\n```\n```\n\n\n",
    "ts": 1760663565.630355
  }
}