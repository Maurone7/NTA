name: CI

on:
  push:
    branches: [ main, fix/ci-bash-test-step ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }} (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      name: CI

      on:
        push:
          branches: [ main ]
        pull_request:
          branches: [ main ]

      jobs:
        test:
          name: Test on ${{ matrix.os }} (Node ${{ matrix.node-version }})
          runs-on: ${{ matrix.os }}
          strategy:
            matrix:
              os: [ubuntu-latest, windows-latest, macos-latest]
              node-version: [20]
          steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.node-version }}
                cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run tests (JUnit output)
              env:
                NTA_TEST: '1'
              shell: bash
              run: |
                # Run Mocha with the JUnit reporter via npx so we get a machine-readable report.
                # Explicitly list the test folders we want Mocha to run so it doesn't import
                # Playwright E2E specs (which use @playwright/test/test.describe).
                # Tee full output into logs/mocha.full.log so we can inspect runner-specific failures
                mkdir -p reports logs
                echo "--- START MOCHA $(date -u +%FT%TZ) ---" > logs/mocha.full.log
                # Run mocha and capture both stdout and stderr
                npx mocha tests/citation tests/unit tests/dom tests/smoke --reporter mocha-junit-reporter --reporter-options mochaFile=reports/junit.xml 2>&1 | tee -a logs/mocha.full.log
                echo "MOCHA_EXIT:$?" >> logs/mocha.full.log
                # Collect any helper script logs under /tmp (some scripts write to /tmp/*.out)
                ls -la /tmp 2>/dev/null | sed -n '1,200p' >> logs/mocha.full.log || true
                for f in /tmp/*.out; do [ -e "$f" ] && echo "--- FILE: $f ---" >> logs/mocha.full.log && tail -n +1 "$f" >> logs/mocha.full.log; done || true

            - name: Upload test report
              uses: actions/upload-artifact@v4
              with:
                name: junit-report-${{ matrix.os }}
                path: reports/junit.xml

            - name: Upload test logs
              uses: actions/upload-artifact@v4
              with:
                name: test-logs-${{ matrix.os }}
                path: |
                  logs
                  reports/junit.xml

            - name: Run Playwright E2E tests (ubuntu only)
              if: matrix.os == 'ubuntu-latest'
              run: |
                npm ci
                npx playwright install --with-deps
                npx playwright test --reporter=list
              env:
                CI: '1'

        package-windows:
          name: Build Windows installer
          runs-on: windows-latest
          needs: test
          steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Use Node.js 20
              uses: actions/setup-node@v4
              with:
                node-version: 20
                cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Build (Windows)
              env:
                CSC_IDENTITY_AUTO_DISCOVERY: 'false'
              run: npm run build:win --if-present

            - name: Upload Windows build artifacts
              uses: actions/upload-artifact@v4
              with:
                name: nta-windows-dist
                path: dist

        package-mac:
          name: Build macOS artifacts
          runs-on: macos-latest
          needs: test
          steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Use Node.js 20
              uses: actions/setup-node@v4
              with:
                node-version: 20
                cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Build (macOS)
              env:
                CSC_IDENTITY_AUTO_DISCOVERY: 'false'
              run: npm run build:mac --if-present

            - name: Upload macOS build artifacts
              uses: actions/upload-artifact@v4
              with:
                name: nta-macos-dist
                path: dist
    strategy:
